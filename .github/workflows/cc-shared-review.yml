name: Claude ‚Äî Shared PR Review (inline)

on:
  workflow_call:
    inputs:
      base_branch:
        description: "Base branch for comparison"
        required: false
        type: string
        default: main
      prompt:
        description: "Optional extra guidance for the review"
        required: false
        type: string
      model:
        description: "Anthropic model"
        required: false
        type: string
        default: claude-4-0-sonnet-20250219
      mcp_config:
        description: "Path or JSON for MCP config (merged with GitHub MCP)"
        required: false
        type: string
        default: .github/claude/mcp.json
      allowed_tools:
        description: "Allowed tools list (pipe-separated)"
        required: false
        type: string
        default: |
          WebSearch
          WebFetch
          Bash(find:*)
          Bash(grep:*)
          Bash(ls:*)
          Bash(cat:*)
          Bash(head:*)
          Bash(tail:*)
          Bash(wc:*)
          Bash(tree:*)
          Bash(gh label:*)
          Bash(gh issue:*)
          Bash(gh project:*)
          mcp__context7__resolve-library-id
          mcp__context7__get-library-docs
          mcp__godoc-mcp__get_doc
          mcp__bloom__search_code
      disallowed_tools:
        description: "Disallowed tools list (pipe-separated)"
        required: false
        type: string
        default: |
          Edit
          MultiEdit
          NotebookEdit
          Write
      runner:
        description: "GitHub runner to use"
        required: false
        type: string
        default: blacksmith-8vcpu-ubuntu-2204
      tech_stack:
        description: "Technology stack (go, nodejs, python, etc)"
        required: false
        type: string
        default: go
    secrets:
      ANTHROPIC_API_KEY:
        required: true
      BLOOM_MCP_TOKEN:
        required: false

permissions:
  contents: read
  pull-requests: write
  issues: write
  id-token: write

jobs:
  review:
    name: Inline review
    runs-on: ${{ inputs.runner }}
    concurrency:
      group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
      cancel-in-progress: true
    if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.fork == false
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: 0

      - name: Setup Node.js (if needed)
        if: inputs.tech_stack == 'nodejs'
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Setup pnpm (if needed)
        if: inputs.tech_stack == 'nodejs'
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Claude inline PR review
        uses: anthropics/claude-code-action@main
        env:
          DEFAULT_WORKFLOW_TOKEN: ${{ github.token }}
          BLOOM_MCP_TOKEN: ${{ secrets.BLOOM_MCP_TOKEN }}
        with:
          mode: experimental-review
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          model: ${{ inputs.model }}
          base_branch: ${{ inputs.base_branch }}
          allowed_tools: ${{ inputs.allowed_tools }}
          disallowed_tools: ${{ inputs.disallowed_tools }}
          direct_prompt: |
            You are conducting a comprehensive code review for a ${{ inputs.tech_stack }}-based application.
            
            **Your Review Scope:**
            - Analyze the entire package holistically, not just isolated files
            - Focus on the changes in this PR, but consider their impact on the broader codebase
            - Review architecture, code quality, security, performance, and maintainability
            - Perform comprehensive security analysis including OWASP Top 10 vulnerabilities
            - Check for secure coding practices and potential attack vectors
            - Conduct semantic linting: check spelling, grammar, word choice, and terminology consistency
            - Verify clear and professional technical communication in comments and documentation

            **Feedback Categories:**
            Provide feedback in exactly 3 categories with these specific emojis:

            **Critical ‚ùå** - Issues that MUST be fixed before merge:
            - Security vulnerabilities (SQL injection, XSS, CSRF, insecure crypto, exposed secrets)
            - Authentication/authorization bypass
            - Input validation failures
            - Potential panics or crashes (Go) / unhandled exceptions (Node.js/Python)
            - Breaking changes to public APIs
            - Data corruption risks
            - Memory leaks
            - Race conditions

            **Minor üü°** - Important improvements that should be addressed:
            - Performance inefficiencies
            - Error handling improvements
            - Design pattern violations
            - Missing tests for critical paths
            - Documentation gaps for public APIs
            - Potential bugs that don't cause crashes
            - Spelling mistakes and typos in comments, docs, and strings
            - Grammar and language clarity issues
            - Inconsistent terminology usage

            **Nits üü¢** - Style and best practice suggestions:
            - Code style inconsistencies
            - Naming improvements
            - Minor refactoring opportunities
            - Comment clarity and readability
            - Test coverage for edge cases
            - Word choice and semantic clarity improvements
            - Technical writing style enhancements
            - Consistent use of technical terms and domain language

            ${{ inputs.tech_stack == 'go' && '
            **Go-Specific Review Principles:**
            1. **Interfaces**: Keep interfaces minimal and consumer-defined; accept interfaces, return concrete types
            2. **Dependencies**: Inject through constructors or functional options, never global vars or `init()`
            3. **Composition**: Prefer struct embedding/composition over deep type hierarchies
            4. **Error Handling**: Handle errors early, no hidden panics
            5. **SOLID/GRASP**: Apply where they naturally map to Go idioms
            6. **Dead Code**: Identify and flag unused functions or dead code
            7. **DDD Architecture**: Ensure proper layer separation (domain, infrastructure, services, presentation) if applicable
            8. **Go Idioms**: Follow standard Go conventions and best practices
            ' || '' }}

            ${{ inputs.tech_stack == 'nodejs' && '
            **Node.js/JavaScript-Specific Review Principles:**
            1. **Async/Await**: Ensure proper async error handling, no unhandled promise rejections
            2. **Type Safety**: If TypeScript, verify proper typing and avoid `any` type
            3. **Dependencies**: Check for security vulnerabilities in npm packages
            4. **Memory Management**: Watch for closures that might cause memory leaks
            5. **Error Boundaries**: Ensure proper error handling and recovery mechanisms
            6. **Input Validation**: Validate and sanitize all user inputs
            7. **Framework Best Practices**: Follow conventions for Express/Next.js/etc.
            8. **Module Patterns**: Use appropriate module patterns (CommonJS/ESM)
            ' || '' }}

            **Output Format:**
            Structure your review as follows:
            ```
            ## Code Review Summary
            Brief overview of the changes and overall assessment.

            ### Critical ‚ùå
            - [Specific issue with file:line reference]

            ### Minor üü°  
            - [Important improvement needed]

            ### Nits üü¢
            - [Style or best practice suggestion]

            ## Architecture Notes
            [Any observations about design patterns or architectural concerns]

            ## Security Considerations
            [Security analysis covering relevant security aspects]

            ## Performance Notes
            [Any performance-related observations]

            ## Language & Documentation Quality
            [Spelling, grammar, terminology consistency assessment]
            ```

            **Important**: 
            - Always include file:line references for specific issues
            - If no issues exist in a category, write "None identified"
            - Focus on actionable feedback
            - Be constructive and educational in your comments
            - Review only the changed lines/hunks in this PR
            - Prefer **inline comments** tied to exact lines
            - Use GitHub's suggestion blocks for quick fixes

            ${{ inputs.prompt }}
          mcp_config: ${{ inputs.mcp_config }}