name: Claude ‚Äî Shared PR Review (inline)

on:
  workflow_call:
    inputs:
      base_branch:
        description: "Base branch for comparison"
        required: false
        type: string
        default: main
      prompt:
        description: "Optional extra guidance for the review (defaults to /review)"
        required: false
        type: string
      model:
        description: "Anthropic model"
        required: false
        type: string
        default: claude-sonnet-4-20250514
      mcp_config:
        description: "Path or JSON for MCP config (merged with GitHub MCP)"
        required: false
        type: string
        default: |
          {
            "mcpServers": {
              "github": {
                "command": "npx",
                "args": ["-y", "@modelcontextprotocol/server-github@latest"],
                "env": {
                  "GITHUB_PERSONAL_ACCESS_TOKEN": "${{ github.token }}",
                  "GITHUB_TOOLSETS": "pull_requests,repos"
                }
              },
              "context7": {
                "type": "http",
                "url": "https://mcp.context7.com/mcp",
                "name": "context7"
              },
              "godoc-mcp": {
                "command": "go",
                "args": ["run", "github.com/mrjoshuak/godoc-mcp@latest"]
              }
            }
          }
      allowed_tools:
        description: "Allowed tools list (pipe-separated)"
        required: false
        type: string
        default: |
          WebSearch
          WebFetch
          Bash(find:*)
          Bash(grep:*)
          Bash(ls:*)
          Bash(cat:*)
          Bash(head:*)
          Bash(tail:*)
          Bash(wc:*)
          Bash(tree:*)
          Bash(gh label:*)
          Bash(gh issue:*)
          Bash(gh project:*)
          Bash(gh pr comment:*)
          Bash(gh pr diff:*)
          Bash(gh pr view:*)
          mcp__github__create_pull_request_review
          mcp__context7__resolve-library-id
          mcp__context7__get-library-docs
          mcp__godoc-mcp__get_doc
          mcp__bloom__search_code
      disallowed_tools:
        description: "Disallowed tools list (pipe-separated)"
        required: false
        type: string
        default: |
          Edit
          MultiEdit
          NotebookEdit
          Write
      runner:
        description: "GitHub runner to use"
        required: false
        type: string
        default: blacksmith-8vcpu-ubuntu-2204
      tech_stack:
        description: "Technology stack (go, nodejs, python, etc)"
        required: false
        type: string
        default: go
    secrets:
      ANTHROPIC_API_KEY:
        required: true
      BLOOM_MCP_TOKEN:
        required: false

permissions:
  contents: read
  pull-requests: write
  issues: write
  id-token: write
  actions: read

jobs:
  review:
    name: Inline review
    runs-on: ${{ inputs.runner }}
    concurrency:
      group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
      cancel-in-progress: true
    if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.fork == false
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: 0

      - name: Setup Node.js (if needed)
        if: inputs.tech_stack == 'nodejs'
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Setup pnpm (if needed)
        if: inputs.tech_stack == 'nodejs'
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Claude inline PR review
        uses: anthropics/claude-code-action@v1
        env:
          DEFAULT_WORKFLOW_TOKEN: ${{ github.token }}
          BLOOM_MCP_TOKEN: ${{ secrets.BLOOM_MCP_TOKEN }}
        with:
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          github_token: ${{ github.token }}
          base_branch: ${{ inputs.base_branch }}
          claude_args: |
            --model ${{ inputs.model }}
            --allowedTools "${{ inputs.allowed_tools }}"
            --disallowedTools "${{ inputs.disallowed_tools }}"
            --mcp-config '${{ inputs.mcp_config }}'
          prompt: |
            /review
            
            Create a comprehensive pull request review with inline comments on specific code lines.
            
            REPO: ${{ github.repository }}
            PR NUMBER: ${{ github.event.pull_request.number }}
            
            IMPORTANT: You MUST use the GitHub MCP tools to create a proper PR review:
            - Use `mcp__github__create_pull_request_review` to submit your review with inline comments
            - Create inline comments on specific lines that need attention
            - Group related comments in a single review submission
            
            You are conducting a comprehensive code review for a **production-grade** ${{ inputs.tech_stack }}-based application.
            
            **Production-Grade Requirements:**
            - Code must be ready for deployment to production environments
            - Ensure robust error handling and recovery mechanisms
            - Verify proper logging and monitoring capabilities
            - Check for scalability and performance under load
            - Validate security hardening and defense in depth
            - Confirm backward compatibility and migration paths
            - Ensure observability (metrics, traces, logs)
            
            **Your Review Scope:**
            - Analyze the entire package holistically, not just isolated files
            - Focus on the changes in this PR, but consider their impact on the broader codebase
            - Review architecture, code quality, security, performance, and maintainability
            - Perform comprehensive security analysis including OWASP Top 10 vulnerabilities
            - Check for secure coding practices and potential attack vectors
            - Conduct semantic linting: check spelling, grammar, word choice, and terminology consistency
            - Verify clear and professional technical communication in comments and documentation

            **Feedback Categories:**
            Provide feedback in exactly 3 categories with these specific emojis:

            **Critical ‚ùå** - Issues that MUST be fixed before merge:
            - Security vulnerabilities (SQL injection, XSS, CSRF, insecure crypto, exposed secrets)
            - Authentication/authorization bypass
            - Input validation failures
            - Potential panics or crashes (Go) / unhandled exceptions (Node.js)
            - Breaking changes to public APIs
            - Data corruption risks
            - Memory leaks
            - Race conditions
            - Missing critical error handling
            - Production stability risks
            - Data loss scenarios

            **Minor üü°** - Important improvements that should be addressed:
            - Performance inefficiencies
            - Error handling improvements
            - Design pattern violations
            - Missing tests for critical paths
            - Documentation gaps for public APIs
            - Potential bugs that don't cause crashes
            - Insufficient logging for production debugging
            - Missing retry logic for transient failures
            - Inadequate input sanitization
            - Spelling mistakes and typos in comments, docs, and strings
            - Grammar and language clarity issues
            - Inconsistent terminology usage

            **Nits üü¢** - Style and best practice suggestions:
            - Code style inconsistencies
            - Naming improvements
            - Minor refactoring opportunities
            - Comment clarity and readability
            - Test coverage for edge cases
            - Word choice and semantic clarity improvements
            - Technical writing style enhancements
            - Consistent use of technical terms and domain language

            ${{ inputs.tech_stack == 'iota-sdk' && '
            **IOTA SDK-Specific Production Review Principles:**
            1. **SQL Query Management**:
               - All SQL queries MUST be defined as constants at the top of repository files
               - Use descriptive names like `paymentFindQuery`, `userInsertQuery`, etc.
               - NEVER write inline SQL strings in functions
            2. **SQL Construction**: 
               - Use `pkg/repo` package for SQL construction (Join, JoinWhere, Insert, Update, FormatLimitOffset, Exists, BatchInsertQueryN)
               - NEVER concatenate SQL strings manually
               - Use parameterized queries to prevent SQL injection
               - Check for manual string concatenation in SQL queries - flag as Critical ‚ùå
               - Verify usage of repo.FormatLimitOffset() for pagination instead of manual LIMIT/OFFSET
               - Ensure repo.JoinWhere() is used for WHERE clauses instead of manual concatenation
               - Use repo.Insert() and repo.Update() for generating INSERT/UPDATE queries
            3. **Test Data Management**:
               - NO raw SQL statements in tests - only use repository methods for inserts/updates
               - Use repository pattern for all test data setup and teardown
               - Tests should use the same repository interfaces as production code
            4. **HTMX Workflows**:
               - Use `pkg/htmx` package for ALL HTMX header operations - NO exceptions
               - Request header getters (MUST use these):
                 * `htmx.IsHxRequest(r)` instead of `r.Header.Get("Hx-Request")`
                 * `htmx.IsBoosted(r)` for checking boosted requests
                 * `htmx.IsHistoryRestoreRequest(r)` for history restore checks
                 * `htmx.Target(r)` to get target element ID
                 * `htmx.CurrentUrl(r)` to get current browser URL
                 * `htmx.Trigger(r)` to get triggered element ID
                 * `htmx.TriggerName(r)` to get triggered element name
                 * `htmx.PromptResponse(r)` to get hx-prompt response
               - Response header setters (MUST use these):
                 * `htmx.Redirect(w, path)` for redirects
                 * `htmx.SetTrigger(w, event, detail)` for triggering client events
                 * `htmx.Retarget(w, target)` to change target element
                 * `htmx.Reselect(w, selector)` to specify swap selector
                 * `htmx.Location(w, path, target)` for client-side navigation
                 * `htmx.PushUrl(w, url)` to push URL to history
                 * `htmx.ReplaceUrl(w, url)` to replace current URL
                 * `htmx.Refresh(w)` for full page refresh
                 * `htmx.Reswap(w, swapStyle)` to change swap behavior
                 * `htmx.TriggerAfterSettle(w, event, detail)` for post-settle triggers
                 * `htmx.TriggerAfterSwap(w, event, detail)` for post-swap triggers
               - NEVER check HTMX headers directly with `r.Header.Get("Hx-*")` - flag as Minor üü°
               - NEVER set HTMX headers directly with `w.Header().Add("Hx-*")` - flag as Minor üü°
               - Check for patterns like `len(r.Header.Get("Hx-Request")) > 0` - should use `htmx.IsHxRequest(r)`
            5. **Repository Pattern**:
               - Follow strict repository pattern with clear separation of concerns
               - Domain layer defines repository interfaces
               - Infrastructure layer implements repositories
               - Services orchestrate business logic using repositories
            6. **DDD Architecture**: 
               - Ensure strict layer separation (domain, infrastructure, services, presentation)
               - Domain must not depend on infrastructure
               - Use dependency injection through constructors
            7. **Templ Templates**:
               - Use .templ files for HTML generation, not string concatenation
               - Follow existing component patterns in components/ package
               - Run templ generate after modifications
            8. **Error Handling**:
               - Use `pkg/serrors` for standard error types
               - Wrap errors with context using error wrapping
               - Handle errors at appropriate layers
               - **Panic Guidelines**:
                 * Panics in setup/init/module registration are ACCEPTABLE
                 * Panics in controllers, services, repositories during request handling - flag as Critical ‚ùå
                 * Acceptable: panic on template compilation failure, missing required config, DB connection at startup
                 * NOT acceptable: panic on invalid form data, missing route params, failed DB queries during request
                 * Use error returns and pkg/serrors for all request-time failures
            9. **Go Idioms**: 
               - Follow standard Go conventions and best practices
               - **Package Import Aliases**: Use flat case (no underscores, no hyphens) for import aliases
                 * Correct: `import sdkuseraggregate "github.com/iota-uz/iota-sdk/domain/user"`
                 * Correct: `import sdkmoneyaccount "github.com/iota-uz/iota-sdk/modules/finance/domain/aggregates/money_account"`
                 * Incorrect: `import user_aggregate`, `import user-aggregate`, `import UserAggregate`
                 * Flag non-flat-case aliases as Nits üü¢
               - **SDK Import Prefix**: All iota-sdk imports should be prefixed with `sdk` when aliased
                 * Correct: `import sdkuser "github.com/iota-uz/iota-sdk/modules/core/domain/aggregates/user"`
                 * Correct: `import sdkservices "github.com/iota-uz/iota-sdk/modules/finance/services"`
                 * Incorrect: `import user "github.com/iota-uz/iota-sdk/modules/core/domain/aggregates/user"`
                 * This helps distinguish SDK imports from local/standard library imports
                 * Flag missing `sdk` prefix as Nits üü¢
            10. **Production Readiness**: Ensure proper metrics, health checks, logging, and graceful degradation
            11. **Shared Utilities Usage**:
               - Use `pkg/shared` helper functions for common operations:
                 * `shared.ParseID()` and `shared.ParseUUID()` for parsing route parameters
                 * `shared.Redirect()` for handling redirects (supports both HTMX and regular HTTP)
                 * `shared.SetFlash()` and `shared.SetFlashMap()` for flash messages
                 * `shared.GetInitials()` for user initials
                 * `shared.Decoder` and `shared.Encoder` for form handling
               - NEVER parse IDs manually with `strconv.Atoi(mux.Vars(r)["id"])` - flag as Minor üü°
               - Check for manual redirect logic instead of using `shared.Redirect()`
            12. **Repository Filters**:
               - Use `pkg/repo` filter types (Eq, NotEq, Gt, Gte, Lt, Lte, In, NotIn, Like, ILike, Between, Or, And)
               - Use `FieldFilter` and `SortBy` types for query building
               - NEVER build filter conditions manually - use the provided filter types
               - Ensure proper usage of filter.String() and filter.Value() methods
            13. **Logging Requirements**:
               - Controllers MUST accept `logger *logrus.Entry` as a parameter when using `di.H`
               - ALWAYS log errors before returning HTTP error responses - flag missing logs as Minor üü°
               - Use appropriate log levels: Error for failures, Warn for recoverable issues, Info for important events
               - Include context in error logs: `logger.Errorf("Failed to retrieve user: %v", err)`
               - Never ignore errors silently - either handle, log, or propagate
            14. **Dependency Injection in Controllers**:
               - Use `di.H` wrapper for all controller handlers that need dependencies
               - Controller methods should accept dependencies as parameters (logger, services, etc.)
               - Example: `router.HandleFunc("/path", di.H(c.Handler)).Methods(http.MethodGet)`
               - Never use global variables or singletons for dependencies
            15. **Form and Query Validation**:
               - Use `composables.UseForm()` for parsing and validating form data
               - Use `composables.UseQuery()` for parsing query parameters
               - NEVER parse forms manually with `r.ParseForm()` followed by manual field access
               - Always validate inputs using the composables functions
               - Example: `dto, err := composables.UseForm(&YourDTO{}, r)`
               - Use `composables.UsePaginated()` for pagination parameters
               - Use other composables helpers: `UseUser()`, `UseTenantID()`, `UsePageCtx()`, `UseLogger()`
            ' || '' }}

            **Important Instructions:**
            - Always include file:line references for specific issues
            - If no issues exist in a category, write "None identified"
            - Focus on actionable feedback
            - Be constructive and educational in your comments
            - Review only the changed lines/hunks in this PR
            - Use `mcp__github__create_pull_request_review` to submit a complete PR review that includes:
              * A main review summary/body with overall feedback
              * Inline comments on specific lines of code that need attention
              * Suggestion blocks for quick fixes where appropriate
            - Focus inline comments on specific file:line locations for actionable feedback
            - Group all feedback into a single review submission rather than multiple comments
            
            ${{ inputs.prompt }}